/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.micropos.api;

import com.micropos.dto.CartDto;
import com.micropos.dto.ErrorDto;
import com.micropos.dto.OrderDto;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-07-05T11:43:21.389460300+08:00[Asia/Shanghai]")
@Validated
@Tag(name = "orders", description = "the orders API")
public interface OrdersApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /orders : a new order based on a cart
     *
     * @param cartDto  (optional)
     * @return A new order (status code 200)
     *         or unexpected error (status code 200)
     */
    @Operation(
        operationId = "createOrder",
        summary = "a new order based on a cart",
        tags = { "orders" },
        responses = {
            @ApiResponse(responseCode = "200", description = "A new order", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  OrderDto.class))),
            @ApiResponse(responseCode = "200", description = "unexpected error", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  ErrorDto.class)))
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/orders",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<OrderDto> createOrder(
        @Parameter(name = "CartDto", description = "", schema = @Schema(description = "")) @Valid @RequestBody(required = false) CartDto cartDto
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : 0, \"items\" : [ { \"amount\" : 1, \"product\" : { \"image\" : \"image\", \"price\" : \"\", \"name\" : \"name\", \"id\" : \"id\" }, \"id\" : 6 }, { \"amount\" : 1, \"product\" : { \"image\" : \"image\", \"price\" : \"\", \"name\" : \"name\", \"id\" : \"id\" }, \"id\" : 6 } ], \"status\" : \"delivered\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /orders/{orderId}/deliver : notify that an order has been delivered
     *
     * @param orderId id of order to be delivered (required)
     * @return Expected response to a valid request (status code 200)
     */
    @Operation(
        operationId = "deliverOrder",
        summary = "notify that an order has been delivered",
        tags = { "orders" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Expected response to a valid request", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  OrderDto.class)))
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/orders/{orderId}/deliver",
        produces = { "application/json" }
    )
    default ResponseEntity<OrderDto> deliverOrder(
        @Parameter(name = "orderId", description = "id of order to be delivered", required = true, schema = @Schema(description = "")) @PathVariable("orderId") Integer orderId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : 0, \"items\" : [ { \"amount\" : 1, \"product\" : { \"image\" : \"image\", \"price\" : \"\", \"name\" : \"name\", \"id\" : \"id\" }, \"id\" : 6 }, { \"amount\" : 1, \"product\" : { \"image\" : \"image\", \"price\" : \"\", \"name\" : \"name\", \"id\" : \"id\" }, \"id\" : 6 } ], \"status\" : \"delivered\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /orders : list all orders
     *
     * @return An array of orders (status code 200)
     *         or unexpected error (status code 200)
     */
    @Operation(
        operationId = "listOrders",
        summary = "list all orders",
        tags = { "orders" },
        responses = {
            @ApiResponse(responseCode = "200", description = "An array of orders", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  OrderDto.class))),
            @ApiResponse(responseCode = "200", description = "unexpected error", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  ErrorDto.class)))
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/orders",
        produces = { "application/json" }
    )
    default ResponseEntity<List<OrderDto>> listOrders(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : 0, \"items\" : [ { \"amount\" : 1, \"product\" : { \"image\" : \"image\", \"price\" : \"\", \"name\" : \"name\", \"id\" : \"id\" }, \"id\" : 6 }, { \"amount\" : 1, \"product\" : { \"image\" : \"image\", \"price\" : \"\", \"name\" : \"name\", \"id\" : \"id\" }, \"id\" : 6 } ], \"status\" : \"delivered\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
